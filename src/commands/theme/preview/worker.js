import chalk from 'chalk';
import path from 'path';
import fs from 'fs';
import { markdownParser } from '../../../md.mjs';
import { logSuccess, logError, ensureDir, fileExists } from '../../../utils/helpers.js';
import { themeManager } from '../../../utils/themeManager.js';

/**
 * 预览主题
 * @param {Command} command 
 * @param {Object} options 
 */
export async function run(command, options) {
  const themeName = command.args[0];
  
  if (!themeName) {
    logError('Please specify a theme name');
    console.log('Usage: md-beautify theme preview <theme-name> [-o output.html]');
    console.log('Use "md-beautify theme list" to see available themes');
    return;
  }
  
  if (!themeManager.themeExists(themeName)) {
    logError(`Theme "${themeName}" not found`);
    const availableThemes = themeManager.getThemeNames();
    console.log('Available themes:', availableThemes.join(', '));
    return;
  }

  // 创建示例内容
  const sampleMarkdown = `# ${themeName.charAt(0).toUpperCase() + themeName.slice(1)} Theme Preview

This is a preview of the **${themeName}** theme.

## Features

- Beautiful typography
- Code syntax highlighting
- Responsive design
- Clean and modern layout

### Code Example

\`\`\`javascript
function hello(name) {
  console.log(\`Hello, \${name}!\`);
}

hello('World');
\`\`\`

### Lists

1. First item
2. Second item
   - Nested item
   - Another nested item
3. Third item

### Blockquote

> This is a blockquote example.
> It can span multiple lines.

### Table

| Feature | Description |
|---------|-------------|
| Theme | ${themeName} |
| Status | Preview |
| Quality | Excellent |

---

*This preview was generated by md-beautify.*
`;

  try {
    const outputFile = options.output || `${themeName}-theme-preview.html`;
    
    // 转换markdown为HTML
    const htmlContent = markdownParser.render(sampleMarkdown);
    
    // 生成完整的HTML文档
    const fullHtml = generateFullHtml(htmlContent, { theme: themeName, inline: true });
    
    // 确保输出目录存在
    const outputDir = path.dirname(path.resolve(outputFile));
    ensureDir(outputDir);
    
    // 写入文件
    await fs.promises.writeFile(outputFile, fullHtml, 'utf8');
    
    logSuccess(`Theme preview generated: ${chalk.yellow(path.resolve(outputFile))}`);
    console.log(chalk.gray(`Open the file in your browser to see the ${themeName} theme preview.`));
    
  } catch (error) {
    logError(`Failed to generate theme preview: ${error.message}`);
  }
}

/**
 * 生成完整的HTML文档
 * @param {string} htmlContent 
 * @param {Object} options 
 * @returns {string}
 */
function generateFullHtml(htmlContent, options) {
  const theme = options.theme || 'default';
  const inline = options.inline;
  
  let styles = '';
  
  if (inline) {
    // 使用主题管理器获取主题CSS
    try {
      styles = themeManager.getThemeCSS(theme);
    } catch (error) {
      console.warn(`Could not load theme CSS: ${error.message}`);
      // 回退到默认主题
      try {
        styles = themeManager.getThemeCSS('default');
      } catch (fallbackError) {
        console.warn(`Could not load default theme CSS: ${fallbackError.message}`);
      }
    }
  }
  
  return `<!DOCTYPE html>
<html lang="zh-CN">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Theme Preview - ${theme}</title>
  ${inline ? `<style>${styles}</style>` : ''}
</head>
<body>
  <div class="md-beautify">
    ${htmlContent}
  </div>
</body>
</html>`;
}